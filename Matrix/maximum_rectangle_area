class Solution {
    vector<int> nextSmallerElement(vector<int> arr, int n){
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for (int  i = n-1; i >= 0; i--)
        {
            int curr = arr[i];

            while(s.top() != -1 && arr[s.top()]>=curr )
                s.pop();

            ans[i] = s.top();
            s.push(i);
        }
        return ans;
        
    }
    vector<int> prevSmallerElement(vector<int> arr, int n){
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for(int i =0; i<n ; i++)
        {
            int curr = arr[i];

            while(s.top() != -1 && arr[s.top()]>=curr )
                s.pop();

            ans[i] = s.top();
            s.push(i);
        }
        return ans;
        
    }

    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();

        vector<int> next(n);
        next = nextSmallerElement(heights, n);    
        vector<int> prev(n);
        prev = prevSmallerElement(heights, n);

        int area = INT_MIN;

        for(int i = 0; i<n; i++){
            int l = heights[i];

            //pseudo index
            if(next[i] == -1)
                next[i] = n;
            
            int b = next[i] - prev[i] -1;
            int newArea = l*b;
            area = max(area, newArea);
        }    
        return area;
    }
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        
        //converting char 2d vector to integer 2d vector        
        vector<vector<int>> v(matrix.size());
        for(int i = 0; i<matrix.size(); i++){
            for(int j=0; j<matrix[0].size(); j++){
                if(matrix[i][j]=='0')
                    v[i].push_back(0);
                
                else v[i].push_back(1);
            }
        }

        int area = largestRectangleArea(v[0]);

        for(int i = 1; i<matrix.size(); i++){
            for(int j=0; j<matrix[0].size(); j++){

                if(v[i][j]!=0)  
                    v[i][j] = v[i][j] + v[i-1][j];

                else v[i][j] = 0;
            }
            area = max(area,largestRectangleArea(v[i]));
        }                
        return area;
    }
};