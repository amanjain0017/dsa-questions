//brute force
class Solution{   
public:
    int median(vector<vector<int>> &matrix, int r, int c){
        
        vector<int>v;
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                v.push_back(matrix[i][j]);
            }
        }
        
        sort(v.begin(),v.end());
        
        return v[(r*c)/2];
    }
};



//binary search
class Solution{   
public:
    int median(vector<vector<int>> &matrix, int R, int C){
        // code here        
        int mini = INT_MAX;
        int maxi = INT_MIN;
        
        for(int i = 0; i<R; i++){
            maxi = max( maxi, matrix[i][C-1]);
            mini = min( mini, matrix[i][0] );
        }
        
        int desired = (R*C + 1)/2;
        
        while(mini<maxi){
            int mid = mini  + (maxi - mini)/2;
            int count = 0;
            
            for(int i = 0 ; i<R; i++){
                count += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
                
            }
            
            if(count< desired)      mini = mid + 1;
            else                    maxi =  mid;
        }
        
        return mini;
    }
};

