//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

int countRev (string s);
int main()
{
    int t; cin >> t;
    while (t--)
    {
        string s; cin >> s;
        cout << countRev (s) << '\n';
    }
}

// Contributed By: Pranay Bansal
// } Driver Code Ends


int countRev (string s)
{
    // your code here
    if(s.size()%2==1)   return -1;
    
    stack<int> st;
    //removing valid part
    for(int i =0; i<s.size(); i++){
        char ch = s[i];
        
        if(ch == '{')
            st.push(ch);
        
        else{ //ch == }
        
            if (!st.empty() and st.top() == '{')
                st.pop();
            
            else st.push(ch);
        }
    }
    
    //stack contains invalid part
    int a  = 0, b = 0;
    
    while(!st.empty()){
        if(st.top() == '{')     a++;
        else                    b++;
        
        st.pop();
    }
    
    int ans = (a + 1)/2 + (b + 1)/2;
    return ans;
}


//alternative
int countMinReversals(string str)
{
    // Step 1: Initialize a stack of char type and ans as 0.
    stack<char> st;
    int ans = 0;
 
    // Step 2: Run a loop for each character of the string
    for (int i = 0; i < str.size(); i++) {
       
        // Step 2.1: If ' { ' encountered push it to the
        // stack
        if (str[i] == '{')
            st.push(str[i]);
        // Step 2.2: If ' } ' is encountered
        else {
            // Step 2.2.1: If stack has a '{' present for
            // '}' encountered, pop from the stack.
            if (!st.empty())
                st.pop();
            // Step 2.2.2: If stack is empty, change '}' to
            // '{' and push it to stack and increment ans by
            // 1
            else {
                st.push('{');
                ans++;
            }
        }
    }
    // Step 3: if stack size is odd return -1.
    if (st.size() % 2 != 0)
        return -1;
    // Step 4: Increment ans by ( stackSize/2 ).
    ans += st.size() / 2;
 
    return ans;
}


