//hasharray
void printDups(const std::string& str)
{
    // Create an array of size 256 and initialize
    // it with 0 to store count of every character
    int count[NO_OF_CHARS] = {0};

    // Calculate the character counts
    for (char ch : str)
    {
        count[ch]++;
    }

    // Print characters having count more than 0
    for (int i = 0; i < NO_OF_CHARS; i++)
    {
        if (count[i] > 1)
            std::cout << static_cast<char>(i) << ", count = " << count[i] << std::endl;
    }
}


//hash maps
void printDups(string str)
{
    unordered_map<char, int> count;
    for (int i = 0; i < str.length(); i++) {
        count[str[i]]++;  //increase the count of characters by 1
    }
  
    for (auto it : count) {   //iterating through the unordered map
        if (it.second > 1)   //if the count of characters is greater than 1 then duplicate found
            cout << it.first << ", count = " << it.second << "\n";
    }
}

//sorting
void printDuplicates(string str){
        int len = str.length();
     
    // Sorting the string
    sort(str.begin(), str.end());
     
    // Loop through the sorted string to find duplicates
    for(int i = 0; i < len; i++) {
        int count = 1;
         
        // Counting the occurrences of each character
        while(i < len-1 && str[i] == str[i+1]) {
            count++;
            i++;
        }
         
        // Printing the duplicate character and its count
        if(count > 1) {
            cout << str[i] << ", count = " << count << endl;
        }
    }
     
}