class Solution{
    public:
    int findSubString(string str)
    {
        // Your code goes here
        int n = str.size();
        
        unordered_map<char, int> m;
        
        for(auto i: str){
            m[i]++;
        }
        
        int dist_count = m.size();
        
        string res = "";
        int size = INT_MAX;
        
        for(int i = 0; i<n; i++){
            int count = 0;
            unordered_map<int, int> mp;
            string window = ""; 
            
            for(int j = i; j<n; j++){
                
                if(mp[str[j]]==0){
                    mp[str[j]] = 1;
                    count++;
                }
                
                window+= str[j];
                
                if(count == dist_count)
                    break;
            }
            
            if(window.size() < size and count == dist_count){
                res  = window;
                size = res.size();
            }
        }
        
        // cout<<res;
        return size;
    }
};



//sliding window
class Solution{
    public:
    int findSubString(string str)
    {
        // Your code goes here
        int n = str.size();
        
        unordered_map<char, int> m;
        
        for(auto i: str){
            m[i]++;
        }
        
        int dist_count = m.size();
        
        int start = 0, start_index = -1, size = INT_MAX;
        
        unordered_map<char, int> mp;
        
        for(int i = 0; i<n; i++){
            
            mp[str[i]]++;
            
            if(mp.size() == dist_count) {
                while(mp[str[start]]>1){
                    mp[str[start]]--;
                    start++;
                }
                
                int len_window = i - start + 1;
                
                if(len_window < size){
                    size = len_window;
                    start_index = start;
                }
                
            }
        }
        
        
        // cout<< str.substr(start_index, size);
        return size;
    }
};