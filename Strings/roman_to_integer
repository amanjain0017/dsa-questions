class Solution {
    
    int value(char ch){
        if(ch == 'I')     return 1;    
        if(ch == 'V')     return 5;    
        if(ch == 'X')     return 10;    
        if(ch == 'L')     return 50;    
        if(ch == 'C')     return 100;    
        if(ch == 'D')     return 500;    
        if(ch == 'M')     return 1000;
        
        return -1;
    }
    
  public:
    int romanToDecimal(string &str) {
        
        int ans = 0;
        for(int i = 0; i<str.size(); i++){
            
            int val1 = value(str[i]);
            
            if( i + 1 < str.size()){
                
                int val2 = value(str[i+1]); 
                
                if(val1 >= val2){
                    ans = ans + val1;
                }
                else{
                    ans = ans + (val2 - val1);
                    i++;
                }
            }
            else{
                ans = ans + val1;
            }
            
        }
        
        return ans;
    }
};


//using map
int romanToDecimal(string& str) {
    map<char, int> m;
    m.insert({ 'I', 1 });
    m.insert({ 'V', 5 });
    m.insert({ 'X', 10 });
    m.insert({ 'L', 50 });
    m.insert({ 'C', 100 });
    m.insert({ 'D', 500 });
    m.insert({ 'M', 1000 });

    int sum = 0;
    int n = str.length();
    
    for (int i = 0; i < n; i++) {
        if (i < n - 1 && m[str[i]] < m[str[i + 1]]) {
            sum += m[str[i + 1]] - m[str[i]];
            i++; // Skip the next character since it's part of a subtractive pair
        } else {
            sum += m[str[i]];
        }
    }

    return sum;
}