		vector<string>find_permutation(string S)
		{
		    // Code here there 
		    vector<string> ans;
		    
		    sort(S.begin(), S.end());
            do {
                ans.push_back(S);
            } while (next_permutation(S.begin(), S.end()));
            
            
            return ans;
        }
        //https://www.educative.io/answers/what-is-the-nextpermutation-function-in-cpp


//include and dont include
void helper(string s, int l, int r, vector<string>& ans, set<string>& unique_perms) {
    if (l == r) {
        if (unique_perms.find(s) == unique_perms.end()) {
            ans.push_back(s);
            unique_perms.insert(s);
        }
    }

    for (int i = l; i <= r; i++) {
        swap(s[l], s[i]);
        helper(s, l + 1, r, ans, unique_perms);
        swap(s[l], s[i]);
    }
}

vector<string> find_permutation(string S) {
    vector<string> ans;
    set<string> unique_perms;

    helper(S, 0, S.size() - 1, ans, unique_perms);

    return ans;
}