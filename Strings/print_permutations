		vector<string>find_permutation(string S)
		{
		    // Code here there 
		    vector<string> ans;
		    
		    sort(S.begin(), S.end());
            do {
                ans.push_back(S);
            } while (next_permutation(S.begin(), S.end()));
            
            
            return ans;
        }
        //https://www.educative.io/answers/what-is-the-nextpermutation-function-in-cpp


//include and dont include
void permute(string& a, int l, int r)
{
    // Base case
    if (l == r)
        cout << a << endl;
    else {
        // Permutations made
        for (int i = l; i <= r; i++) {
 
            // Swapping done
            swap(a[l], a[i]);
 
            // Recursion called
            permute(a, l + 1, r);
 
            // backtrack
            swap(a[l], a[i]);
        }
    }
}
 
// Driver Code
int main()
{
    string str = "ABC";
    int n = str.size();
 
    // Function call
    permute(str, 0, n - 1);
    return 0;
}