class node{
    public:
    int data;
    int i, j;

    node(int data, int row, int col){
        this->data = data;
        this->i = row;
        this->j = col;
    }
};

class compare{
    public:

    bool operator()(node* a, node* b){
        return a->data > b->data;
    }
};

vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
{
    // Write your code here. 
    priority_queue<node*, vector<node*> , compare> pq;

    //create minHeap from starting of every array
    int n = kArrays.size();
    for(int i =0; i<n; i++ ){
        node* temp = new node(kArrays[i][0], i,0);
        pq.push(temp);
    }

    vector<int> ans;
    //store min in ans
    while(pq.size()>0){
        node* temp = pq.top();
        pq.pop();
        ans.push_back(temp->data);

        int i = temp->i;
        int j = temp->j;

        if(j+1 < kArrays[i].size()){
            node* next = new node(kArrays[i][j+1], i, j+1);
            pq.push(next);
        }
    }

    return ans;
}