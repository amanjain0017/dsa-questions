//brite force: o(n^2 log n)
#include <algorithm>
int getKthLargest(vector<int> &arr, int k)
{
	//	Write your code here.
	vector<int> subArraySum;
	int n = arr.size();

	for(int i =0; i<n; i++){
		int sum = 0;
		for(int j = i; j<n; j++){
			sum+=arr[j];
			subArraySum.push_back(sum);
		}
		
	}

	//sort

	sort(subArraySum.begin(), subArraySum.end());
	//kth largest
	n = subArraySum.size();
	return subArraySum[n-k];
}

//using a minheap
#include <queue>
int getKthLargest(vector<int> &arr, int k)
{
	//	Write your code here.
	priority_queue<int, vector<int>, greater<int>> pq;
	int n = arr.size();

	for(int i =0; i<n; i++){
		int sum = 0;
		for(int j = i; j<n; j++){
			sum+=arr[j];

			if(pq.size()<k){
				pq.push(sum);
			}else{
				if(sum>pq.top()){
					pq.pop();
					pq.push(sum);
				}
			}
			
		}
		
	}

	return pq.top();
}