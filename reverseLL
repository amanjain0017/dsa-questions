//iterative uisng 3 pointers
node *reverseLL(node* head){
    node* curr = head;
    node* prev = NULL, *next = NULL:

    while(current!=NULL){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }

    //the new head
    return prev;

}


//recursive 1
Node* reverse(Node* &head, Node* curr, Node* prvs){
    if(curr==NULL){
        head = prvs;
        return;
    }

    Node* next = curr->next;
    curr->next = prvs;
    reverse(head,next,curr);
}


//recursive 2
 Node* reverse(Node* head)
    {
        if (head == NULL || head->next == NULL)
            return head;
 
        /* reverse the rest list and put
          the first element at the end */
        Node* rest = reverse(head->next);
        head->next->next = head;
 
        /* tricky step -- see the diagram */
        head->next = NULL;
 
        /* fix the head pointer */
        return rest;
    }


//using stacks
void reverseLL(Node** head)
{
    // Create a stack "s" of Node type
    stack<Node*> s;
    Node* temp = *head;
    while (temp->next != NULL) {
        // Push all the nodes in to stack
        s.push(temp);
        temp = temp->next;
    }
    *head = temp;
    while (!s.empty()) {
        // Store the top value of stack in list
        temp->next = s.top();
        // Pop the value from stack
        s.pop();
        // update the next pointer in the list
        temp = temp->next;
    }
    temp->next = NULL;
}