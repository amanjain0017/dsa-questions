class Solution{
    public:
    vector<int> findLeastGreater(vector<int>& arr, int n) {
        
        vector<int> ans;
        
        for(int i = 0; i<n; i++){
            
            int greater = INT_MAX;
            
            for(int j = i+1; j<n; j++){
                if(arr[j] > arr[i]){
                    greater = min(greater, arr[j]);
                }
            }
            
            int element = greater==INT_MAX ? -1 : greater;
            ans.push_back(element);
        }
        
        return ans;
    }
};



//usig BST
struct Node{
    int data ;
    Node *left;
    Node *right;
    
    Node(int val){
        data = val;
        left = right = NULL;
    }
};


class Solution{
    public:
    
    Node* insert(Node* root, int val, Node* &succ){
        if(!root)
            return root = new Node(val);
        
        if(root->data > val){
            succ = root;
            root->left = insert(root->left, val, succ);
        }
        else {
            root->right = insert(root->right, val, succ);
        }
        
        return root;
        
    }
    
    vector<int> findLeastGreater(vector<int>& arr, int n) {
        
        Node* root = NULL;
        
        for(int i = n-1; i>=0; i--){
            Node * succ = NULL;
            
            root = insert(root, arr[i], succ);
            
            if(succ){
                arr[i] = succ->data;
            }else{
                arr[i] = -1;
            }
        }
        
        return arr;
    }
};