class Solution {

    TreeNode* minValue(TreeNode* root){
        if(!root)   return NULL;

        while(root->left)
            root = root->left;

        return root;
    }

public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)  return NULL;

        if(root->val==key){
            //0 child
            if(!root->left  && !root->right){
                delete root;
                return NULL;
            }//1 child at left
            else if(root->left  && !root->right){
                TreeNode* temp = root->left;
                delete root;
                return temp;
            }//1 child at right
            else if(!root->left  && root->right){
                TreeNode* temp = root->right;
                delete root;
                return temp;
            }//2 childs
            else{
                int mini = minValue(root->right)->val;
                root->val = mini;
                root->right = deleteNode(root->right, mini);
                return root;
            }
        }   
        else if(root->val < key){
            root->right = deleteNode(root->right, key);
            return root;
        } 
        else{
            root->left = deleteNode(root->left, key);
            return root;
        }
    }
};