//hashmap solution o(n)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        for(int i = 0; i<nums.size(); i++){
            m[nums[i]]++;
        }

        int ans = 0;
        int maxi = 0;
        for(auto i: m){
            if(i.second>maxi){
                maxi = max(maxi, i.second);
                ans = i.first;
            }
        }
        return ans;
    }
};

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        int n = nums.size();

        for(int i = 0; i<n; i++){
            m[nums[i]]++;
        }

        for(auto i: m){
            if(i.second>n/2){
                return i.first;
            }
        }
        return 0;
    }
};

//sorting array O(nlogn)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();

        sort(nums.begin(), nums.end());
        return nums[n/2];
    }
};