class Solution{
    public:
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
    	vector<pair<int, int>>v;
    	for(int i = 0; i<n; i++){
    	    v.push_back({arr[i], dep[i]});
    	}
    	
    	sort(v.begin(), v.end());
    	
    	priority_queue<int, vector<int> , greater<int>> pq;
    	pq.push(v[0].second);
    	
    	int count =1;
    	
    	for(int i = 1; i<n; i++){
    	    if(v[i].first > pq.top()){
    	        pq.pop();
    	        pq.push(v[i].second);
    	    }
    	    else{
    	        count++;
    	        pq.push(v[i].second);
    	    }
    	}
    	
    	return count;
    }
};



// 2 pointer approach
    int findPlatform(int arr[], int dep[], int n)
    {
    	// Your code here
        sort(arr, arr + n);
        sort(dep, dep + n);
        int count = 1;
        
        int i = 1, j = 0;
        
        while(i<n){
            if( arr[i] <= dep[j] ){
                count++;
            }   
            else{
                j++;
            }
            
            i++;
        }
        
        return count;
    }