Node* reverse(Node* head){
    if(!head &&  !head->next)
        return head;
        
    Node* curr = head;
    Node* prev = NULL;
    Node* next = NULL;
    
    while(curr){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    
    return prev;
    
}

class Solution
{
    public:
    Node* addOne(Node *head) 
    {
        // Your Code here
        // return head of list after adding one
        head = reverse(head);
        
        Node* temp  = head;
        
        while(temp!=NULL){
            
            if(temp->data==9 && temp->next==NULL){
                temp->data = 1;
                Node* newNode = new Node(0);
                newNode->next = head;
                head = newNode;
                temp = temp->next;
                
            }
            else if(temp->data==9 ){
                temp->data = 0;
                temp = temp->next;
            }
            else{
                temp->data = temp->data + 1;
                break;
            }
        }
        
        
        return reverse(head);
    }
};


//using carry
class Solution
{
    public:
    Node *reverse(Node* head){
        if(head==NULL){
            return head;
        }
        Node* prev=NULL,*curr=head;
        
        while(curr){
            Node* next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        
        return prev;
    }
    
    Node* addOne(Node *head) 
    {
        if(head==NULL){
            return head;
        }
        
        Node* temp=reverse(head);
        Node* ptr=temp;
        Node* prev=NULL;
        int r=1;
        while(temp){
            int x=temp->data;
            x=x+r;
            r=x/10;
            temp->data=x%10;
            // cout<<temp->data<<" ";
            prev=temp;
            temp=temp->next;
        }
        if(r){
            prev->next=new Node(r);
            prev=prev->next;
        }
        // cout<<endl;
        
        
        return reverse(ptr);
    }
};