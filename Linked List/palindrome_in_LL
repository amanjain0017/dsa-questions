//using stack
class Solution{
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        Node* slow = head;
 
        stack<int> s;
        while (slow != NULL) {
            s.push(slow->data);
            slow = slow->next;
        }
 
        while (head != NULL) {
            int i = s.top();
            s.pop();
        
            if (head->data != i) {
                return false;
            }
 
            head = head->next;
        } 
        return true;
    }
};

//using a vector and applying the palindrome logic

//using string
class Solution{
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        if(!head || !head->next) return 1;
        string s = "";
        
        Node * temp = head;
        while(temp){
            s+=to_string(temp->data);
            temp=temp->next;
        }
        
        string t = s;
        reverse(t.begin(), t.end());
        return t==s;
    }
};

//find middle, reverse LL after it and compare head and middle
class Solution{
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        // Node* temp = head;
        Node* slow = head;
        Node* fast = head;
        while(fast != NULL && fast->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        Node* curr = slow;
        Node* prev = NULL;
        Node* next;
        while(curr != NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        
        fast = head;
        while(prev != NULL){
            if(fast->data != prev->data){
                return false;
            }
            prev = prev->next;
            fast = fast->next;
        }
        return true;
        
    }
};