//using stack
void reverse()
    {
        stack<int> st;
        Node* temp = head;
        while (temp != NULL) {
            st.push(temp->data);
            temp = temp->next;
        }
 
        // added all the elements sequence wise in the
        // st
        temp = head;
        while (temp != NULL) {
            temp->data = st.top();
            st.pop();
            temp = temp->next;
        }
 
        // popped all the elements and the added in the
        // linked list,
        // which are in the reversed order->
    }

    //using 3 pointers
    Node* reverseDLL(Node * head)
{
    //Your code here
    if(!head && !head->next)
        return head;
    
    
    Node* prev = NULL, *next = NULL;
    Node* curr = head;
    
    while(curr){
        next = curr->next;
        curr->next = prev;
        curr->prev = next;
        prev = curr;
        curr = next;
    }
    
    return prev;
}


//using 2 pointers
struct Node* reverseDLL(struct Node * head)
{
    
    //Your code here
    if(head == NULL || head->next == NULL)
        return head;
    
    struct Node *prev = NULL, *curr = head;
    
    while(curr != NULL){
        prev = curr->prev;
        curr->prev = curr->next;
        curr->next = prev;
        
        curr = curr->prev;
    }
    
    return prev->prev;
}