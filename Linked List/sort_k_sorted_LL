struct compare{
    bool operator()(struct Node* p1, struct Node* p2)
    {
        return p1->data > p2->data;
    }
}

struct Node* sortAKSortedDLL(struct Node* head, int k){
    if(head==NULL)
        return NULL;

    priority_queue< Node* , vector<Node*> , compare> pq ;

    Node* newHead = NULL, *last = NULL;

    for(int i = 0; head!=NULL and i<=k; i++){
        pq.push(head);
        head = head->next;
    }

    while(!pq.empty()){

        if(newHead == NULL){
            newHead = pq.top();
            newHead->prev = NULL;
            last = newHead;
        }
        else{
            last->next = pq.top();
            pq.top()->prev = last;
            last = pq.top();
        }

        pq.pop();

        if(head){
            pq.push(head);
            head = head->next;
        }
 
    }

    last->next = NULL;
    return newHead;

}


int main()
{
    struct Node* head = NULL;
 
    // Create the doubly linked list:
    // 3<->6<->2<->12<->56<->8
    push(&head, 8);
    push(&head, 56);
    push(&head, 12);
    push(&head, 2);
    push(&head, 6);
    push(&head, 3);
 
    int k = 2;
 
    cout << "Original Doubly linked list:\n";
    printList(head);
 
    // sort the biotonic DLL
    head = sortAKSortedDLL(head, k);
 
    cout << "\nDoubly Linked List after sorting:\n";
    printList(head);
 
    return 0;
}



//using insertion 
// function to sort a k sorted doubly linked list
struct Node* sortAKSortedDLL(struct Node* head, int k)
{
    if(head == NULL || head->next == NULL)
        return head;
  
    // perform on all the nodes in list
    for(Node *i = head->next; i != NULL; i = i->next) {
        Node *j = i;
          // There will be atmost k swaps for each element in the list
        // since each node is k steps away from its correct position
        while(j->prev != NULL && j->data < j->prev->data) {
              // swap j and j.prev node
            Node* temp = j->prev->prev;
            Node* temp2 = j->prev;
            Node *temp3 = j->next;
            j->prev->next = temp3;
            j->prev->prev = j;
            j->prev = temp;
            j->next = temp2;
            if(temp != NULL)
                temp->next = j;
            if(temp3 != NULL)
                temp3->prev = temp2;
        }
          // if j is now the new head
       // then reset head
        if(j->prev == NULL)
            head = j;
    }
    return head;
}