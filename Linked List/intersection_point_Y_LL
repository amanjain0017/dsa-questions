int intersectPoint(Node* head1, Node* head2)
{
    // Your Code HereNOde * 
    Node * temp1 = head1;
    Node * temp2 = head2;
    
    //LL1 length
    int count1 = 0;
    while(temp1){
        count1++;
        temp1 = temp1->next;
    }
    //LL2 length
    int count2 = 0;
    while(temp2){
        count2++;
        temp2 = temp2->next;
    }
    
    //move longer ll forward by diff
    int diff = abs(count1 - count2);
    temp1 = head1;
    temp2 = head2;
    
    if(count1 > count2){
        for(int i = 0; i<diff; i++){
            temp1 = temp1->next;
        }
    }
    
    else if(count2 > count1){
        for(int i = 0; i<diff; i++){
            temp2 = temp2->next;
        }
    }
    
    //finding intersection point
    while(temp1!=temp2){
        temp1 = temp1->next;
        temp2 = temp2->next;
    }
    
    if(temp1)   return temp1->data;
    return -1;

    
}



//2 for loops
/* function to get the intersection point of two linked
lists head1 and head2 */
Node* getIntesectionNode(Node* head1, Node* head2)
{
    while (head2) {
        Node* temp = head1;
        while (temp) {
            // if both Nodes are same
            if (temp == head2)
                return head2;
            temp = temp->next;
        }
        head2 = head2->next;
    }
    // intersection is not present between the lists
    return NULL;
}




//by using set/hash
// function to find the intersection point of two lists
void MegeNode(Node* n1, Node* n2)
{
    unordered_set<Node*> hs;
    while (n1 != NULL) {
        hs.insert(n1);
        n1 = n1->next;
    }
    while (n2) {
        if (hs.find(n2) != hs.end()) {
            cout << n2->data << endl;
            break;
        }
        n2 = n2->next;
    }
}