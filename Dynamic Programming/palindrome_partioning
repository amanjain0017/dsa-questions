class Solution{
public:

    bool isPalindrome(string &str, int i , int j){

        while(i<j){
            if(str[i]!=str[j])
                return false;
                
            i++;
            j--;
        }
        
        return true;
    }
    
    int solve(string &str, int i, int j, vector<vector<int>>& dp) {
        if (dp[i][j] != -1)
            return dp[i][j];

        if (i >= j || isPalindrome(str, i, j))
            return dp[i][j] = 0;

        int ans = INT_MAX;
        for (int k = i; k <= j - 1; k++) {
            
            if (dp[i][k] == -1)
                dp[i][k] = solve(str, i, k, dp);

            if (dp[k + 1][j] == -1)
                dp[k + 1][j] = solve(str, k + 1, j, dp);

            int temp = 1 + dp[i][k] + dp[k + 1][j];
            ans = min(ans, temp);
        }

        return dp[i][j] = ans;
    }

    int palindromicPartition(string str)
    {
        int n = str.length();
        vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
        return solve(str, 0, n-1, dp);
    }
};