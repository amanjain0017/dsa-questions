class Solution{
		

	public:
	
	
	
	long long solve(int cost[], int n, int w, vector<vector<int>>& dp){
        if (w == 0)
            return 0;
        if (w < 0 or n <= 0)
            return INT_MAX;
     
        if (dp[n][w] != -1)
            return dp[n][w];
     
        if (cost[n - 1] < 0)
            return dp[n][w] = solve(cost,n - 1, w, dp);
     
        if (n <= w) {
            return dp[n][w]  = min(cost[n - 1] + solve(cost,n, w - n, dp), solve(cost,n - 1, w, dp));
        }
        return dp[n][w] = solve(cost,n - 1, w, dp);
	}
	
	int minimumCost(int cost[], int N, int W) 
	{ 
        // Your code goes here
        vector<vector<int>> dp (N+1, vector<int>(W+1, -1) );
        
        long long x = solve(cost, N, W, dp);
        
        return (x == INT_MAX) ? -1 : (int)x;
	}
};



//alternative
int helper(vector<int>& cost, vector<int>& weight, int n,
           int w, vector<vector<int> >& dp)
{
    // base cases
    if (w == 0)
        return 0;
    if (w < 0 or n <= 0)
        return INT_MAX;
 
    if (dp[n][w] != -1)
        return dp[n][w];
 
    if (cost[n - 1] < 0)
        return dp[n][w]
               = min(INT_MAX,
                     helper(cost, weight, n - 1, w, dp));
 
    if (weight[n - 1] <= w) {
        return dp[n][w]
               = min(cost[n - 1]
                         + helper(cost, weight, n,
                                  w - weight[n - 1], dp),
                     helper(cost, weight, n - 1, w, dp));
    }
    return dp[n][w] = helper(cost, weight, n - 1, w, dp);
}
int minCost(vector<int>& cost, int W)
{
    int N = cost.size();
    // Your code goes here
    vector<int> weight(N);
 
    // create the weight array
    for (int i = 1; i <= N; i++) {
        weight[i - 1] = i;
    }
 
    // initialize the dp array
    vector<vector<int> > dp(N + 1, vector<int>(W + 1, -1));
 
    int res = helper(cost, weight, N, W, dp);
 
    // return -1 if result is MAX
    return (res == INT_MAX) ? -1 : res;
}



//bottom up
int MinimumCost(int cost[], int n, int W)
{
    // val[] and wt[] arrays
    // val[] array to store cost of 'i' kg packet of orange
    // wt[] array weight of packet of orange
    vector<int> val, wt;
 
    // traverse the original cost[] array and skip
    // unavailable packets and make val[] and wt[]
    // array. size variable tells the available number
    // of distinct weighted packets
    int size = 0;
    for (int i=0; i<n; i++)
    {
        if (cost[i]!= -1)
        {
            val.push_back(cost[i]);
            wt.push_back(i+1);
            size++;
        }
    }
 
    n = size;
    int min_cost[n+1][W+1];
 
    // fill 0th row with infinity
    for (int i=0; i<=W; i++)
        min_cost[0][i] = INF;
 
    // fill 0'th column with 0
    for (int i=1; i<=n; i++)
        min_cost[i][0] = 0;
 
    // now check for each weight one by one and fill the
    // matrix according to the condition
    for (int i=1; i<=n; i++)
    {
        for (int j=1; j<=W; j++)
        {
            // wt[i-1]>j means capacity of bag is
            // less than weight of item
            if (wt[i-1] > j)
                min_cost[i][j] = min_cost[i-1][j];
 
            // here we check we get minimum cost either
            // by including it or excluding it
            else
                min_cost[i][j] = min(min_cost[i-1][j],
                     min_cost[i][j-wt[i-1]] + val[i-1]);
        }
    }
 
    // exactly weight W can not be made by given weights
    return (min_cost[n][W]==INF)? -1: min_cost[n][W];
}
 