	long long solve( int mat[4][3], int n , int i, int j, vector<vector<long long>> &dp){
	    if(n==1)    return 1;
	    
	    if(dp[mat[i][j]][n]!=-1)    return dp[mat[i][j]][n];
	    
	    long long  a, b, c, d ,e;
	    a=b=c=d=e=0;
	    
	    a = solve(mat, n-1, i, j, dp);
	    
	    if(j-1>=0 and mat[i][j-1]!=-1)      b = solve(mat, n-1, i, j-1, dp);
	    if(j+1<3 and mat[i][j+1]!=-1)      c = solve(mat, n-1, i, j+1, dp);
	    if(i-1>=0 and mat[i-1][j]!=-1)      d = solve(mat, n-1, i-1, j, dp);
	    if(i+1<4 and mat[i+1][j]!=-1)      e = solve(mat, n-1, i+1, j, dp);
	    
	    return dp[mat[i][j]][n] = a + b + c + d + e;
	}
	
	long long getCount(int N)
	{
		// Your code goes here
		int mat[4][3] = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {-1, 0, -1}};
		
		long long ans= 0;
		vector<vector<long long>> dp(10, vector<long long>(N+1, -1));
		
		for(int i = 0; i<4; i++){
		    for(int j = 0; j<3; j++){
		        if(mat[i][j]!=-1)
		            ans += solve(mat, N, i, j, dp);
		    }
		}
		
		return ans;
	}