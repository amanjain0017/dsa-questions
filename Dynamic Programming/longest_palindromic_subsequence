class Solution{
    
    int solve(string a, string b, int n, int m,  vector<vector<int>>& dp){
        if(n==0 || m==0)    return 0;
        
        if(dp[n][m]!=-1)    return dp[n][m];
        
        if(a[n-1]==b[m-1]){
            return dp[n][m] = 1 + solve(a, b, n-1, m-1, dp);
        }
        else return dp[n][m]= max(solve(a, b, n, m-1, dp), solve(a, b, n-1, m, dp));
    }
    
  public:
    int longestPalinSubseq(string A) {
        
        string B = A ;
        reverse(B.begin(), B.end());
        int n = A.length();
        int m = n;
        
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return solve(A,B, n, m, dp);
    }
};



//bottom up
class Solution{
    
     int solveMem (int n, int m, string s1, string s2){
         vector<vector<int>>dp(n+1, vector<int> (m+1, 0));
         
         for(int i = 1; i<=n; i++){
             for(int j = 1; j<=m; j++){
                if(s1[i-1] == s2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max( dp[i][j-1], dp[i-1][j]);
             }
         }
         
         return dp[n][m];
    }
    
  public:
    int longestPalinSubseq(string A) {
        
        string B = A ;
        reverse(B.begin(), B.end());
        int n = A.length();
        int m = n;
        
        // vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        return solveMem(n, m, A, B);
    }
};