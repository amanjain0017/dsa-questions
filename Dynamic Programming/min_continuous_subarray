
class Solution{
  public:
  int smallestSumSubarray(vector<int>& a){
      //Code here
      int sum = 0, ans = INT_MAX;
      
      for(int i = 0; i<a.size(); i++){
          sum += a[i];
          ans = min(ans, sum);
          
          if(sum>0)     sum = 0;
      }
      
      return ans;
  }
};


//dynamic programming
int minSubarraySum(std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> dp(n); // dp[i] represents the minimum sum subarray ending at index i
    dp[0] = nums[0];
    int minSum = dp[0];

    for (int i = 1; i < n; i++) {
        dp[i] = std::min(nums[i], nums[i] + dp[i - 1]);
        minSum = std::min(minSum, dp[i]);
    }

    return minSum;
}