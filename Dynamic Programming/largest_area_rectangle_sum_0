class Solution{
  public:
  
  pair<int, int> subSum(vector<int> temp){
      int sum = 0;
      int max_len = 0;
      int ending_index = -1;
      int starting_index = -1;
      
      unordered_map<int, int> m;
      
      for(int i = 0; i<temp.size(); i++){
          sum += temp[i];
          
          if(sum == 0){
              
              if(i + 1 > max_len){
                  max_len = i + 1;
                  starting_index = 0;
                  ending_index = i;
              }
          }
          
          if(m.find(sum) != m.end()){
              if(i - m[sum] > max_len){
                    max_len = i - m[sum];
                    ending_index = i;
                    starting_index = m[sum] + 1;
              }

          }
          
          else{
              m[sum] = i;
          }
      }
      
      return make_pair(starting_index, ending_index);
  }
  
  vector<vector<int>> sumZeroMatrix(vector<vector<int>> a){
      //Code Here
      int r = a.size();
      int c = a[0].size();
      
      int start_row = -1;
      int start_col = -1;
      int end_row = -1;
      int end_col = -1;
      
      int max_area = 0;
      
      for(int i = 0; i<r; i++){
            vector<int> temp(c);
            
            for(int j = i; j<r; j++){
                for(int k = 0; k<c; k++){
                    temp[k] += a[j][k];
                }
                
                
                pair<int, int> p = subSum(temp);
                
                if(p.first == -1)   continue;
                
                int length = p.second - p.first + 1;
                int area = length * (j - i + 1);
                
                if(area > max_area || ((area == max_area) && ((length > end_col - start_col  + 1) || (p.first < start_col))) ){
                    
                    max_area = area;
                    start_row = i;
                    end_row = j;
                    start_col = p.first;
                    end_col = p.second;
                }
            }
      }
      

    vector<vector<int>> ans;
    
    if(max_area == 0)   return ans;

    for (int i = start_row; i <= end_row; i++) {
        vector<int> res;
        for (int j = start_col; j <= end_col; j++) {
            res.push_back(a[i][j]);
        }
        ans.push_back(res);
    }
      return ans;
  }
};