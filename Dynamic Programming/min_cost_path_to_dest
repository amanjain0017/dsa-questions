int minCost(int cost[R][C], int m, int n)
{
    if (n < 0 || m < 0)
        return INT_MAX;
    
    if (m == 0 && n == 0)
        return cost[m][n];

    if(dp[m][n]!=-1)    return dp[m][n];

    int top = minCost(cost, m - 1, n);
    int left = minCost(cost, m, n - 1);
    int topleft = minCost(cost, m - 1, n - 1);

    return dp[m][n] = cost[m][n] + min( top, left, topleft);
}
 

 
// Driver code
int main()
{
    int cost[R][C]
        = { { 1, 2, 3 }, { 4, 8, 2 }, { 1, 5, 3 } };


    vector<vector<int>> dp(R, vector<int> (C, -1)); 
    cout << minCost(cost, 2, 2) << endl;
 
    return 0;
}




//bottom up
int minCost(int cost[R][C], int m, int n)
{
    int i, j;
 
    // Instead of following line, we can use int
    // tc[m+1][n+1] or dynamically allocate memory to save
    // space. The following line is used to keep the program
    // simple and make it working on all compilers.
    int tc[R][C];
 
    tc[0][0] = cost[0][0];
 
    /* Initialize first column of total cost(tc) array */
    for (i = 1; i <= m; i++)
        tc[i][0] = tc[i - 1][0] + cost[i][0];
 
    /* Initialize first row of tc array */
    for (j = 1; j <= n; j++)
        tc[0][j] = tc[0][j - 1] + cost[0][j];
 
    /* Construct rest of the tc array */
    for (i = 1; i <= m; i++)
        for (j = 1; j <= n; j++)
            tc[i][j] = min(tc[i - 1][j - 1], tc[i - 1][j],
                           tc[i][j - 1])
                       + cost[i][j];
 
    return tc[m][n];
}