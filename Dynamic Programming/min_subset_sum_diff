//memoization
int f(int idx, int sum, int arr[], int n, int totalSum,
      vector<vector<int> >& dp)
{
    if (idx == n) {
        // One subset sum is 'sum' and the other is
        // 'totalSum - sum'
        return abs((totalSum - sum) - sum);
    }
 
    if (dp[idx][sum] != -1) {
        // If the result for the current index
        // and sum is already computed, return it
        return dp[idx][sum];
    }
 
    // Include the current element in the sum
    int pick = f(idx + 1, sum + arr[idx], arr, n, totalSum, dp);
 
    // Exclude the current element from the sum
    int notPick = f(idx + 1, sum, arr, n, totalSum, dp);
 
    // Store the minimum result in the memoization table and
    // return it
    return dp[idx][sum] = min(pick, notPick);
}
 
int findMin(int arr[], int n)
{
    int totalSum = 0;
    for (int i = 0; i < n; i++) {
        totalSum += arr[i];
    }
 
    // Create a memoization table initialized with -1
    vector<vector<int>> dp(n + 1, vector<int>(totalSum + 1, -1));
 
    // Call the recursive function 'f'
    return f(0, 0, arr, n, totalSum, dp);
}


//bottom up
int findMin(int arr[], int n)
{
    // Calculate sum of all elements
    int sum = 0;
    for (int i = 0; i < n; i++)
        sum += arr[i];
 
    // Create an array to store results of subproblems
    bool dp[n + 1][sum + 1];
 
    // Initialize first column as true. 0 sum is possible
    // with all elements.
    for (int i = 0; i <= n; i++)
        dp[i][0] = true;
 
    // Initialize top row, except dp[0][0], as false. With
    // 0 elements, no other sum except 0 is possible
    for (int i = 1; i <= sum; i++)
        dp[0][i] = false;
 
    // Fill the partition table in bottom up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            // If i'th element is excluded
            dp[i][j] = dp[i - 1][j];
 
            // If i'th element is included
            if (arr[i - 1] <= j)
                dp[i][j] |= dp[i - 1][j - arr[i - 1]];
        }
    }
 
    // Initialize difference of two sums.
    int diff = INT_MAX;
 
    // Find the largest j such that dp[n][j]
    // is true where j loops from sum/2 t0 0
    for (int j = sum / 2; j >= 0; j--) {
        // Find the
        if (dp[n][j] == true) {
            diff = sum - 2 * j;
            break;
        }
    }
    return diff;
}