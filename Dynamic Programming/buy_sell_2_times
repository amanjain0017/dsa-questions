int solve(vector<int>& price, int index, int buy, vector<vector<vector<int>>>& dp, int limit) {
    if (index >= price.size()) return 0;
    if (limit == 2) return 0;

    if (dp[index][buy][limit] != -1)        return dp[index][buy][limit];

    int profit = 0;

    if (buy) {
        int buyIt = -price[index] + solve(price, index + 1, 0, dp, limit);
        int ignore = 0 + solve(price, index + 1, 1, dp, limit);

        profit = max(buyIt, ignore);
    } else {
        int sell = price[index] + solve(price, index + 1, 1, dp, limit + 1);
        int ignore = 0 + solve(price, index + 1, 0, dp, limit);

        profit = max(sell, ignore);
    }

    dp[index][buy][limit] = profit;
    return profit;
}

int maxProfit(vector<int>&price){
    //Write your code here..
    
    int n = price.size();
    vector<vector<vector<int>> > dp(n + 1, vector<vector<int>> (2, vector<int> (3, -1)));
    return solve( price, 0, 1, dp, 0);
}



//alternative
int solve(vector<int>&price,int n,int count, vector<vector<vector<int>>>&dp,int buy){
    if(n>=price.size() ||count==2)
    return 0;
    if(dp[n][buy][count]!=-1)
    return dp[n][buy][count];
    
    if(buy)
  {
    return dp[n][buy][count] = max(-price[n]+solve(price,n+1,count,dp,0),solve(price,n+1,count,dp,1));
  } 
  else
  return dp[n][buy][count]=max(solve(price,n+1,count,dp,0),price[n]+solve(price,n+1,count+1,dp,1));
}


int maxProfit(vector<int>&price){
    //Write your code here.. int
    
  vector<vector<vector<int>>>dp(price.size()+1,vector<vector<int>>(2,vector<int>(3,-1)));
  return solve(price,0,0,dp,1);
} 


int maxProfit(vector<int>&nums)
{
    int n = nums.size();
    vector<vector<int>>next(2,vector<int>(3,0));
    vector<vector<int>>cur(2,vector<int>(3,0));
    for(int i=n-1;i>=0;i--)
    {
        for(int j=0;j<2;j++)
        {
            for(int k=1;k<3;k++)
            {
                if(j==1)
                cur[j][k] = max(-nums[i]+next[0][k],next[1][k]);
                else
                cur[j][k] = max(nums[i]+next[1][k-1],next[0][k]);
            }
        }
        next = cur;
    }
    return cur[1][2];
}