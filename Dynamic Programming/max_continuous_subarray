class Solution{
    public:
    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long long maxSubarraySum(int arr[], int n){
        
        // Your code here
        long long sum = 0, ans = INT_MIN;
        for(int i = 0; i<n; i++){
            sum += arr[i];
            ans = max(ans, sum);
            if(sum<0)   sum = 0;
        }
        
        return ans;
        
    }
};


//printing index
void maxSubArraySum(int a[], int size)
{
    int max_so_far = INT_MIN, max_ending_here = 0,
        start = 0, end = 0, s = 0;
 
    for (int i = 0; i < size; i++) {
        max_ending_here += a[i];
 
        if (max_so_far < max_ending_here) {
            max_so_far = max_ending_here;
            start = s;
            end = i;
        }
 
        if (max_ending_here < 0) {
            max_ending_here = 0;
            s = i + 1;
        }
    }
    cout << "Maximum contiguous sum is " << max_so_far
         << endl;
    cout << "Starting index " << start << endl
         << "Ending index " << end << endl;
}



//dynamic programming
#include <vector>
#include <algorithm>

int maxSubarraySum(std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> dp(n); // dp[i] represents the maximum sum subarray ending at index i
    dp[0] = nums[0];
    int maxSum = dp[0];

    for (int i = 1; i < n; i++) {
        dp[i] = std::max(nums[i], nums[i] + dp[i - 1]);
        maxSum = std::max(maxSum, dp[i]);
    }

    return maxSum;
}



