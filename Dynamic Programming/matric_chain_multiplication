class Solution{
    
    int solve(int arr[], int i, int j, vector<vector<int>> &dp){
        if(i>=j)    return 0;
        
        if(dp[i][j]!=-1)    return dp[i][j];
        
        int ans = INT_MAX;
        for(int k = i; k<j; k++){
            int tempans = solve(arr,i , k, dp) + solve(arr, k+1, j, dp) + arr[i-1] * arr[k] * arr[j];
            ans = min(ans, tempans);
        }
        
        return dp[i][j]= ans;
    }
    
public:
    int matrixMultiplication(int N, int arr[])
    {
        vector<vector<int>> dp(N+1, vector<int>(N+1, -1));
        return solve(arr, 1, N-1, dp);
    }
};


//bottom up
    int matrixMultiplication(int N, int arr[]) {
        vector<vector<int>> dp(N, vector<int>(N, 0));

        // Initialization: cost is zero when multiplying a single matrix
        for (int i = 1; i < N; i++) {
            dp[i][i] = 0;
        }

        // l denotes the chain length (number of matrices to be multiplied)
        for (int l = 2; l < N; l++) {
            for (int i = 1; i < N - l + 1; i++) {
                int j = i + l - 1;
                dp[i][j] = INT_MAX;

                for (int k = i; k < j; k++) {
                    // Compute the cost of multiplying matrices from i to j
                    int tempCost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
                    dp[i][j] = min(dp[i][j], tempCost);
                }
            }
        }

        // The answer is stored in dp[1][N-1]
        return dp[1][N - 1];
    }