int solve(vector<vector<int>> &mine, int n, int m, int x, int y, vector<vector<int>> &dp){
    if(x<0 || x==n || y==m)     return 0;

    if(dp[x][y]!=-1)            return dp[x][y];

    int right = solve(mine, n, m, x, y+1, dp);
    int rightUp = solve(mine, n, m, x-1, y+1, dp);
    int rightDown = solve(mine, n, m, x+1, y+1, dp);

    return dp[x][y] = mine[x][y] + max({right, rightUp, rightDown});
}

int maxGoldCollected(vector<vector<int>> mine, int n, int m) {
    // Write your code here.
    int maxGold = 0;

    vector<vector<int>> dp(n+1, vector<int> (m+1, -1));
    //finding max by starting from each row
    for(int i = 0; i<n; i++){

        int goldThisRow = solve(mine, n, m, i, 0, dp);
        maxGold = max(maxGold, goldThisRow);
    }

    return maxGold;

}


//bottom up
const int MAX = 100;
 
// Returns maximum amount of gold that can be collected
// when journey started from first column and moves
// allowed are right, right-up and right-down
int getMaxGold(int gold[][MAX], int m, int n)
{
    // Create a table for storing intermediate results
    // and initialize all cells to 0. The first row of
    // goldMineTable gives the maximum gold that the miner
    // can collect when starts that row
    int goldTable[m][n];
    memset(goldTable, 0, sizeof(goldTable));
 
    for (int col=n-1; col>=0; col--)
    {
        for (int row=0; row<m; row++)
        {
            // Gold collected on going to the cell on the right(->)
            int right = (col==n-1)? 0: goldTable[row][col+1];
 
            // Gold collected on going to the cell to right up (/)
            int right_up = (row==0 || col==n-1)? 0:
                            goldTable[row-1][col+1];
 
            // Gold collected on going to the cell to right down (\)
            int right_down = (row==m-1 || col==n-1)? 0:
                             goldTable[row+1][col+1];
 
            // Max gold collected from taking either of the
            // above 3 paths
            goldTable[row][col] = gold[row][col] +
                              max(right, max(right_up, right_down));
                                                     
        }
    }
 
    // The max amount of gold collected will be the max
    // value in first column of all rows
    int res = goldTable[0][0];
    for (int i=1; i<m; i++)
        res = max(res, goldTable[i][0]);
    return res;
}
 
// Driver Code
int main()
{
    int gold[MAX][MAX]= { {1, 3, 1, 5},
        {2, 2, 4, 1},
        {5, 0, 2, 3},
        {0, 6, 1, 2}
    };
    int m = 4, n = 4;
    cout << getMaxGold(gold, m, n);
    return 0;
}




//GOLDMINEEEEEEEE variation for top to bottom
class Solution{
public:
    
    int solve(vector<vector<int>> &Matrix, int n , int x, int y,  vector<vector<int>> &dp){
        if(x==n || y<0 || y==n)    return 0;
        
        if(dp[x][y]!=-1)    return dp[x][y];
        
        int down = solve(Matrix, n, x+1, y, dp);
        int ldown = solve(Matrix, n, x+1, y-1, dp);
        int rdown = solve(Matrix, n, x+1, y+1, dp);
        
        return dp[x][y] = Matrix[x][y] + max({down, ldown, rdown});
        
    }

    int maximumPath(int N, vector<vector<int>> Matrix)
    {
            // Write your code here.
        int maxi = 0;
        int n = Matrix.size();
    
        vector<vector<int>> dp(n, vector<int> (n, -1));
        //finding max by starting from each row
        for(int i = 0; i<n; i++){
    
            int colAns = solve(Matrix, n, 0, i, dp);
            maxi = max(maxi, colAns);
        }
    
        return maxi;
    }
};