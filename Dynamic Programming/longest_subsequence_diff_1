    int longestSubsequence(int N, int A[])
    {
        // code here
        vector<int> dp(N);
        
        for(int i = 0; i<N; i++){
            dp[i] = 1;
        }
        
        dp[0] = 1;
        
        int maxi = 1;
        
        for(int i = 1; i<N; i++){
            for(int j = 0; j<i; j++){
                
                if(abs(A[j] - A[i])==1 ){
                    dp[i] = max(dp[i], 1 + dp[j]);
                }
            }
            
            maxi = max(maxi, dp[i]);
        }
        
        return maxi;
        
    }



//hashmap
    int longestSubsequence(int N, int A[])
    {
        // code here
        unordered_map<int, int> m;
        int maxi = 1;
        
        for(int i = 0; i<N; i++){
            int len = 0;
            
            if(m[A[i]-1])   len = m[A[i]-1];
            if(m[A[i]+1] and m[A[i]+1]>len)   len = m[A[i]+1];
            
            m[A[i]] = len + 1;
            maxi = max(maxi, m[A[i]]);
        }
        
        return maxi;
        
    }