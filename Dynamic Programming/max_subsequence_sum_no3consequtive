int solve(vector<int> &a, int i, vector<int> &dp){

	if(i<0)		return 0;

	if (i == 0)
        return a[i];

	if(dp[i]!=-1)	return dp[i];

	int opt1 = a[i-1] + a[i] + solve(a, i-3, dp);
	int opt2 = a[i] + solve(a, i-2, dp);
	int opt3 = solve(a, i-1, dp);

	return dp[i] = max({opt1, opt2, opt3});
}

int maxSum(vector<int> &a, int n) 
{
	// Write your code here.
	vector<int> dp(n, -1);
	return solve(a, n-1,dp );
}


//alternative
int maxSumHandler(vector<int> &a, vector<int>& dp, int i) 
{
	if (i == 0) 
    {
		return a[0];
	}

	if (i == 1) 
    {
		return a[0] + a[1];
	}

	if (i == 2) 
    {
		return max(a[0] + a[1], max(a[1] + a[2], a[0] + a[2]));
	}

	if (dp[i] != -1) return dp[i];

	int res =  max( maxSumHandler(a, dp, i - 1), max( a[i] + maxSumHandler(a, dp, i - 2) ,
	                a[i] + a[i - 1] + maxSumHandler(a, dp, i - 3) ) );

	return dp[i] = res;
}

int maxSum(vector<int> &a, int n) 
{

	vector<int> dp(n, -1);

	return maxSumHandler(a, dp, n - 1);
}


//bottom up
int maxSumWO3Consec(int arr[], int n)
{
    // Stores result for subarray arr[0..i], i.e.,
    // maximum possible sum in subarray arr[0..i]
    // such that no three elements are consecutive.
    int sum[n];
   
    // Base cases (process first three elements)
    if (n >= 1)
        sum[0] = arr[0];
   
    if (n >= 2)
        sum[1] = arr[0] + arr[1];
   
    if (n > 2)
        sum[2] = max(sum[1], max(arr[1] +
                               arr[2], arr[0] + arr[2]));
   
    // Process rest of the elements
    // We have three cases
    // 1) Exclude arr[i], i.e., sum[i] = sum[i-1]
    // 2) Exclude arr[i-1], i.e., sum[i] = sum[i-2] + arr[i]
    // 3) Exclude arr[i-2], i.e., sum[i-3] + arr[i] + arr[i-1]
    for (int i = 3; i < n; i++)
        sum[i] = max(max(sum[i - 1], sum[i - 2] + arr[i]),
                     arr[i] + arr[i - 1] + sum[i - 3]);
   
    return sum[n - 1];
}