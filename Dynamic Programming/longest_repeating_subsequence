class Solution {
	public:
	
	    int solve(string& str1, string& str2, int n , int m, vector<vector<int>>& dp){
	        if(n==0 || m==0)    return 0;
	        
	        if(dp[n][m]!=-1)    return dp[n][m];
	        
	        if(str1[n-1]==str2[m-1] && n!=m){
	            return dp[n][m] = 1 + solve(str1, str2, n-1, m-1, dp);
	        }
	        else return dp[n][m] = max( solve(str1, str2, n, m-1, dp), solve(str1, str2, n-1, m, dp));
	    }
	    
		int LongestRepeatingSubsequence(string str){
		    
		    string str2 = str;
		    int n = str.length();
		    vector<vector<int>> dp(n+1, vector<int>(n+1, -1));
		    
		    return solve(str, str2, n, n, dp);
		}

};


     int solveMem (int n, int m, string s1, string s2){
         vector<vector<int>>dp(n+1, vector<int> (m+1, 0));
         
         for(int i = 1; i<=n; i++){
             for(int j = 1; j<=m; j++){
                if(s1[i-1] == s2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max( dp[i][j-1], dp[i-1][j]);
             }
         }
         
         return dp[n][m];
    }