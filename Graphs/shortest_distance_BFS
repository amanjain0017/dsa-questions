#include<bits/stdc++.h>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	unordered_map<int, list<int>> adj;
	for(int i = 0; i<m; i++){
		int u = edges[i].first ;
		int v = edges[i].second ;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	unordered_map<int, bool> visited;
	visited[s] = true;

	unordered_map<int, int> parent;
	parent[s] = -1;

	queue<int> q;
	q.push(s);

	while(!q.empty()){
		int front = q.front();
		q.pop();

		for(auto neighbour: adj[front]){
			if(!visited[neighbour]){
				q.push(neighbour);
				visited[neighbour] = true;
				parent[neighbour] = front;
			}
		}
	}

	vector<int> ans;
	
	int curr = t;
	ans.push_back(t);

	while(curr!=s){
		curr = parent[curr];
		ans.push_back(curr); 
	}

	reverse(ans.begin(), ans.end());
	return ans;


	
}
