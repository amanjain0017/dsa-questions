#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    
    //create adjacency list
    unordered_map<int, list<pair<int, int>>>adj;
    for(int i = 0; i<edges; i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int w = vec[i][2];

        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }

    //initialize dist vector with infinity
    vector<int> dist(vertices, INT_MAX);
    dist[source] = 0;

    set<pair<int, int>> s;       //(nodeDist, node)
    s.insert(make_pair(0, source));

    while(!s.empty()){
        auto top = *(s.begin());
        s.erase(s.begin());

        int nodeDist = top.first;
        int node = top.second;

        for(auto neighbour : adj[node]){
            if(nodeDist + neighbour.second < dist[neighbour.first]){
                auto record = s.find(make_pair(dist[neighbour.first], neighbour.first));

                if(record!=s.end()) //checking if bigger dist present in the set
                    s.erase(record);

                dist[neighbour.first] = nodeDist + neighbour.second;
                s.insert(make_pair(dist[neighbour.first], neighbour.first));
            }
        }
    }

    return dist;
}
