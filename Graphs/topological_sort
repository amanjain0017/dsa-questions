#include <bits/stdc++.h> 

void toposort(unordered_map<int, list<int>> &adj, stack<int> &s, 
unordered_map<int, bool> &visited, int node){

    visited[node] = true;

    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            toposort(adj,s, visited, neighbour);
        }
    }

    s.push(node);
}


vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    
    //adjacency list
    unordered_map<int, list<int>> adj;
    for(int i = 0; i< e; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
    }

    stack<int> s;
    unordered_map<int, bool> visited;

    for (int i = 0; i < v; i++) {
        if(!visited[i]){
            toposort(adj, s, visited, i);
        }
    }

    vector<int> ans;
    while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
    }

    return ans;
}

//topological sort using kahn's algo(BFS)
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    
    //adjacency list
    unordered_map<int, list<int>> adj;
    for(int i = 0; i< e; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
    }

    vector<int> ans;

    vector<int> indegree(v);
    for(auto i: adj){
        for(auto j: i.second){
            indegree[j]++;
        }
    }

    queue<int> q;
    for(int i = 0; i< v; i++){
        if(indegree[i]==0)
            q.push(i);
    }

    while(!q.empty()){
        int front = q.front();
        q.pop();
        ans.push_back(front);

        for(auto neighbour: adj[front]){
            indegree[neighbour]--;

            if(indegree[neighbour]==0)
                q.push(neighbour);
        }
    }

    return ans;
}