#include<bits/stdc++.h>

bool isCyclicDFS(unordered_map<int, list<int>>& adj, 
unordered_map<int, bool>& visited, unordered_map<int, bool>& dfsvisited, int node){

    visited[node] = true;
    dfsvisited[node] = true;

    for(auto neighbour: adj[node]){
        if(!visited[neighbour]){
            bool ans = isCyclicDFS(adj, visited, dfsvisited, neighbour);

            if(ans)
                return true;
        }
        else if(dfsvisited[neighbour]){
            return true;
        }
    }

    dfsvisited[node] = false; //backtracking
    return false;
}

int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.

      unordered_map<int, list<int>> adj;
      for(int i = 0; i< edges.size(); i++){
          int u = edges[i].first;
          int v = edges[i].second;

          adj[u].push_back(v);
      } 

      unordered_map<int, bool> visited;
      unordered_map<int, bool> dfsvisited;
      for(int i = 1; i<=n; i++){
        if(!visited[i]){
            bool ans = isCyclicDFS(adj, visited, dfsvisited, i);

            if(ans) 
                return 1;
        }
      }
      return 0;
}



//using BFS(kahns algo)
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.

      unordered_map<int, list<int>> adj;
      for(int i = 0; i< edges.size(); i++){
          int u = edges[i].first -1;
          int v = edges[i].second -1;

          adj[u].push_back(v);
      } 

    //finding indegree of graphs
    vector<int> indegree(n);
    for(auto i: adj){
        for(auto j: i.second){
            indegree[j]++;
        }
    }

    //insert nodes with 0 indegree
    queue<int> q;
    for(int i = 0; i< n; i++){
        if(indegree[i]==0)
            q.push(i);
    }

    //traversing for neighbours
    int count = 0;
    
    while(!q.empty()){
        int front = q.front();
        q.pop();
        count++;

        for(auto neighbour: adj[front]){
            indegree[neighbour]--;

            if(indegree[neighbour]==0)
                q.push(neighbour);
        }
    }

    if(count==n)
        return false;
    
    else return true;
}