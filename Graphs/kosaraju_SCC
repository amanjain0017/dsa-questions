#include<bits/stdc++.h>

void dfs(unordered_map<int, bool>& visited, unordered_map<int, list<int>>& adj, stack<int>&s, int node){

	visited[node] = true;

	for(auto neighbour: adj[node]){
		if(!visited[neighbour]){
			dfs(visited, adj, s, neighbour);
		}
	}

	s.push(node);
}

void reverseDFS(unordered_map<int, bool>& visited, unordered_map<int, list<int>>& transpose,
 int node){

	visited[node] = true;

	for(auto neighbour: transpose[node]){
		if(!visited[neighbour]){
			reverseDFS(visited, transpose, neighbour);
		}
	}
}

int stronglyConnectedComponents(int v, vector<vector<int>> &edges)
{
	// Write your code here.
	unordered_map<int, list<int>> adj;
	for(int i = 0; i<edges.size(); i++){
		int u = edges[i][0];
		int v = edges[i][1];

		adj[u].push_back(v);
	}

	//toposort
	stack<int>s;
	unordered_map<int, bool> visited;
	for(int i = 0; i<v; i++){
		if(!visited[i]){
			dfs(visited, adj, s, i);
		}
	}

	//transpose
	unordered_map<int, list<int>> transpose;
	for(int i =0; i<v; i++){
		for(auto neighbour: adj[i]){
			transpose[neighbour].push_back(i);
		}
		visited[i] = 0;
	}


	int count = 0;
	while(!s.empty()){
		int top = s.top();
		s.pop();

		if(!visited[top]){
			count++;
			reverseDFS(visited, transpose, top);
		}
	}
	return count;

}