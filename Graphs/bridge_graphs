#include<bits/stdc++.h>

void dfs(vector<int> &disc, vector<int> &low, int node, int parent, int &timer, 
vector<vector<int>> &result, unordered_map<int, bool> &visited,
 unordered_map<int, list<int>> &adj ){

    visited[node] = true;
    disc[node] = low[node] = timer++;

    for(auto neighbour: adj[node]){
        if(neighbour==parent)   
            continue;

        if(!visited[neighbour]){
            dfs(disc, low, neighbour, node, timer, result, visited, adj);
            low[node] = min(low[node], low[neighbour]);

            //bridge check
            if(low[neighbour] > disc[node]){
                vector<int> ans;
                ans.push_back(node);
                ans.push_back(neighbour);
                result.push_back(ans);
            }
        }
        else{//it is a backedgeeeeeeee
            low[node] = min(low[node], disc[neighbour]);
        }
    }    
}

vector<vector<int>> findBridges(vector<vector<int>> &edges, int v, int e){
    unordered_map<int, list<int>> adj;
    for(int i = 0; i<e; i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int timer = 0;
    vector<int> disc(v, -1);
    vector<int> low(v, -1);

    int parent = -1;

    unordered_map<int, bool> visited;
    vector<vector<int>> result;

    for(int i =0; i<v; i++){
        if(!visited[i]){
            dfs(disc, low, i, parent, timer, result, visited, adj);
        }
    }

    return result;
}