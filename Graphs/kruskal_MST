#include<bits/stdc++.h>

bool compare(vector<int> &a, vector<int>&b){
  return a[2]<b[2];
}

int findParent(vector<int>&parent, int node){
  if(parent[node]==node)
    return node;

  parent[node] = findParent(parent, parent[node]);
  return parent[node];
}

void unionSet(int u, int v, vector<int>&rank, vector<int>&parent){
  if(rank[u] < rank[v])
    parent[u] = v;

  else if(rank[v] < rank[u])
    parent[v] = u;

  else{
    parent[v] = u;
    rank[u]++;
  }
}

int minimumSpanningTree(vector<vector<int>>& edges, int n){
  sort(edges.begin(), edges.end(), compare);
  vector<int> parent(n);
  vector<int> rank(n);

  for(int i =0; i<n; i++){
    parent[i] = i;
    rank[i] = 0;
  }

  int minWeight = 0;
  for(int i=0; i<edges.size(); i++){
    int u = findParent(parent, edges[i][0]);
    int v = findParent(parent, edges[i][1]);
    int w = edges[i][2];

    if(u!=v){
      minWeight+=w;
      unionSet(u, v, rank, parent);
    }
  }
  return minWeight;
}