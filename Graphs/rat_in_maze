class Solution{
    public:
    
    bool isSafe(vector<vector<int>> &m, int n, int x, int y, vector<vector<bool>> &visited){
        if(x>=0 && x<n && y>=0 && y<n && m[x][y] == 1 && visited[x][y]== 0 )
            return true;
            
        return false;
    }
    
    void dfs(vector<vector<int>> &m, int n, int x, int y, string path,  vector<vector<bool>> &visited, 
    vector<string> &ans){
    
        //baseCase
        if(x == n-1 && y == n-1){
            ans.push_back(path);
            return;
        }
        
        visited[x][y] = true;
        
        //down
        if(isSafe(m, n, x+1, y, visited))
            dfs(m, n, x+1 , y, path + 'D', visited, ans);
        
        //left
        if(isSafe(m, n, x, y-1, visited))
            dfs(m, n, x, y-1, path + 'L', visited, ans);
        
        //right
        if(isSafe(m, n, x, y+1, visited))
            dfs(m, n, x , y+1, path + 'R', visited, ans);
        
        //up
        if(isSafe(m, n, x-1, y, visited))
            dfs(m, n, x-1, y, path + 'U', visited, ans);
            
        visited[x][y] = false;
    }
    
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> ans;
        
        //edge case
        if(m[0][0]==0)  
            return ans;
        
        vector<vector<bool>> visited(n, vector<bool>(n, 0));
        string path = "";
        
        dfs(m, n, 0 , 0, path, visited, ans);
        
        return ans;
        
    }
};
