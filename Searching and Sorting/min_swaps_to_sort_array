void swap(vector<int> &arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int indexOf(vector<int> &arr, int ele)
{
    for(int i = 0; i < arr.size(); i++)
    {
        if (arr[i] == ele)
        {
            return i;
        }
    }
    return -1;
}

// Return the minimum number
// of swaps required to sort the array
int minSwaps(vector<int> arr, int N)
{
    int ans = 0;
    vector<int> temp(arr.begin(),arr.end());
    sort(temp.begin(),temp.end());
    
    for(int i = 0; i < N; i++)
    {
        
        // This is checking whether
        // the current element is
        // at the right place or not
        if (arr[i] != temp[i])
        {
            ans++;

            // Swap the current element
            // with the right index
            // so that arr[0] to arr[i] is sorted
            swap(arr, i, indexOf(arr, temp[i]));
        }
    }
    return ans;
}


//using pair
class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    // Code here
	    vector<pair<int, int>>v;
	    
	    for(int i =0; i<nums.size(); i++){
	        v.push_back({nums[i], i});
	    }
	    
	    sort(v.begin(), v.end());
	    
	    int count = 0;
	    for(int i =0; i<nums.size(); i++){
	        if(v[i].second==i)
	            continue;
	            
	        else{
	            count++;
	            swap(v[i], v[v[i].second]);
	            i--;
	        }
	    }
	    
	    return count;
	}
};