int findMissing(int arr[], int n)
{   
    int d,s,i,sum=0,missingnumber;
    int a=arr[0];
    int l=arr[n-1];
  
  
    /* Taking the sum of all the elements of the array
       including the missing element using formulae 
       S(n) = n/2 (a+l)  where a is the first element 
       and l is the last element */
      
    if((a+l)%2==0) /* ensuring this as n/2(a+l) and (a+l)/2
                      would give different values programmatically */
    {
        s = (a+l)/2;
        s = s*(n+1);
    }
    else
    {
        s = (n+1)/2;
        s = (a+l)*s;
  
    }
    
    // Taking the sum of all the elements of the
    // array excluding the missing element
    
    for(i=0;i<=n-1;i++)
    {
        sum = sum + arr[i];
    }
  
    missingnumber=s-sum;
  
    return missingnumber;
  
}



//optimal
class Solution{   
public:

    int solve(int arr[], int low, int high, int diff){
        if(low>=high) return -1;
        
        int mid = low + (high - low)/2;
        
        if(arr[mid + 1] - arr[mid] != diff )
            return arr[mid] + diff;
            
        if(arr[mid ] - arr[mid - 1] != diff )
            return arr[mid - 1] + diff;
            
        if(arr[mid] == (arr[0] + mid*diff))
            return solve(arr, mid + 1, high, diff);
        
        else
            return solve(arr, low , mid - 1, diff);
    }

    int findMissing(int arr[], int n) {
        // code here
        int diff = (arr[n-1] - arr[0])/n;
        return solve(arr, 0, n-1, diff);
    }
};