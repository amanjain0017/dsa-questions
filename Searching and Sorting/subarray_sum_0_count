class Solution{
public:
    //Function to count subarrays with sum equal to 0.
    long long int findSubarray(vector<long long int> &arr, int n ) {
        //code here
        long long int count = 0;
        unordered_map<long long int, int> m;
        
        m[0] = 1;
        
        long long int sum = 0;
        for(int i = 0; i<n; i++){
            sum+=arr[i];
            
            if(m[sum])
                count+=m[sum];
                
            m[sum]++;

        }
        
        return count;
    }
};


//printing array with 0 sum
void printSubarraysWithZeroSum(vector<int> arr) {
    unordered_map<int, vector<int>> sumMap;
    int n = arr.size();
    int sum = 0;

    for (int i = 0; i < n; i++) {
        sum += arr[i];
        if (sum == 0) {
            cout << "Subarray from index 0 to " << i << endl;
        }
        if (sumMap.find(sum) != sumMap.end()) {
            vector<int> prevIndices = sumMap[sum];
            for (int j : prevIndices) {
                cout << "Subarray from index " << (j + 1) << " to " << i << endl;
            }
        }
        sumMap[sum].push_back(i);
    }
}

