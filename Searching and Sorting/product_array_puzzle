class Solution{
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
       
        //code here 
        vector<long long int> prefix(n);
        vector<long long int> suffix(n);
        vector<long long int> ans(n);
        
        
        prefix[0] = 1;
        for(int i = 1; i<n; i++){
            prefix[i] = prefix[i-1] * nums[i-1];
        }
        
        suffix[n-1] = 1;
        for(int i = n-2; i>=0; i--){
            suffix[i] = suffix[i+1] * nums[i+1];
        }
        
        for(int i  = 0; i<n; i++){
            ans[i] = prefix[i] * suffix[i];
        }
        
        return ans;
 
    }
};



//without extra space
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> result(n,1);

        //store product of prefix elements for that element
        int prefix = 1;
        for(int i= 0; i<n; i++){
            result[i] = prefix;
            prefix = prefix * nums[i];
        }

        //multiply result with its postfix elements
        int postfix = 1;
        for(int i=n-1; i>=0; i--){
            result[i] *= postfix;
            postfix = postfix * nums[i];
        }

        return result;        
    }
};