//finding pivot and then applying binary search
class Solution {
public:
    
    int binarySearch(vector<int>& nums, int target, int s, int e){
        while(s<=e){
            int mid = s + (e-s)/2;

            if(nums[mid]==target)
                return mid;
            else if (nums[mid]< target)
                s = mid+1;
            else e = mid-1;
        }
        return -1;
    }
    
    int findPivot(vector<int> &nums){
        int s = 0, e = nums.size()-1;

        while(s<e){
            int mid = s+ (e-s)/2;

            if(nums[mid]>=nums[0])
                s = mid + 1;

            else e = mid;
        }
        return s;
    }

    int search(vector<int>& nums, int target) {
        int pivot = findPivot(nums);

        if (target>=nums[pivot] && target<=nums[nums.size()-1])
            return binarySearch(nums, target, pivot, nums.size()-1);
        
        return binarySearch(nums, target, 0, pivot-1);
    }
};



//alternate approach
int beg=0,end=nums.size()-1,mid;
        while(beg<=end)
        {
            mid=(beg+end)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[beg]<=nums[mid])
            {
                if(target<=nums[mid] && target>=nums[beg])
                    end=mid-1;
                else
                    beg=mid+1;
            }
            
            else
            {
                if(target>=nums[mid] && target<=nums[end])
                   beg=mid+1;
                else
                    end=mid-1;
            }
            
        }
        return -1;
    }