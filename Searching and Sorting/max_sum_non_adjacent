class Solution
{
    public:
    
    
    int solve(int arr[], int n,  vector<int> &dp){
        if(n<0)
            return 0;
            
        if(dp[n]!=-1)   return dp[n];
        
        dp[n] = max(arr[n] + solve(arr, n-2, dp), solve(arr, n-1, dp));
        return dp[n];
    }
    //Function to find the maximum money the thief can get.
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        vector<int> dp(n, -1);
        return solve(arr, n-1, dp); 
    }
};


//bottom up
    int solve(int arr[], int n){
        
        if (n == 0)
            return 0;
        if (n == 1)
            return arr[0];
        
        vector<int> dp(n, 0);
        dp[0] = arr[0];
        dp[1] = max(arr[0], arr[1]);
        
        for (int i = 2; i < n; i++)
        {
            dp[i] = max(dp[i - 1], dp[i - 2] + arr[i]);
        }
        
        return dp[n - 1];
    }
    
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        // vector<int> dp(n, -1);
        return solve(arr, n); 
    }