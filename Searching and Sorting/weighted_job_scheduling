#include <iostream>
#include <algorithm>
using namespace std;
 
// A job has start time, finish time and profit.
struct Job
{
    int start, finish, profit;
};


bool comp(Job a, Job b){
    return a.finish < b.finish;
}

int nextValidJob(Job arr[], int i){

    for(int j = i-1; j>=0; j--){
        if(arr[j].end <= arr[i-1].start)
            return j;
    }
    return -1;
}

int solve(Job arr[], int n){

    if(n==0)    return 0;
    if(n==1)    return arr[0].profit;

    if(dp[n]!=-1)   return dp[n];

    int include = arr[n-1].profit;
    int i = nextValidJob(arr, n); 

    if(i != -1)
        include += solve(arr, i + 1 , dp);

    int exclude = solve(arr, n-1, dp);

    return dp[n] = max(include, exclude);

}

int findMaxProfit(Job arr[], int n){
    sort(arr, arr+n, comp);

    vector<int> dp(n + 1, -1);
    return solve(arr, n, dp);
}

int main()
{
    Job arr[] = {{3, 10, 20}, {1, 2, 50}, {6, 19, 100}, {2, 100, 200}};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout << "The optimal profit is " << findMaxProfit(arr, n);
    return 0;
}