class Solution{
    public:
    bool areAnagrams(Node *root1, Node *root2)
    {
        if(!root1 and !root2)    return true;
        if(!root1 or !root2)    return false;
        
        queue<Node* > q1, q2;
        
        q1.push(root1);
        q2.push(root2);
        
        while(1){
            int n1 = q1.size();
            int n2 = q2.size();
            
            if(n1!=n2)      return false;
            
            if(n1 == 0)     break;
            
            
            vector<int> curr1, curr2;
            
            while(n1--){
                Node* front1 = q1.front();
                q1.pop();
                if(front1->left)      q1.push(front1->left);
                if(front1->right)     q1.push(front1->right);
                curr1.push_back(front1->data);
                
                
                Node* front2 = q2.front();
                q2.pop();
                if(front2->left)     q2.push(front2->left);
                if(front2->right)    q2.push(front2->right);
                curr2.push_back(front2->data);
                
            }
            
            sort(curr1.begin(), curr1.end());
            sort(curr2.begin(), curr2.end());
            
            if(curr1!=curr2)    return false;
        }
        
        return true;
    }
};



class Solution{
    public:
    bool areAnagrams(Node *root1, Node *root2)
    {
        if(!root1 and !root2)    return true;
        if(!root1 or !root2)    return false;
        
        queue<Node* > q1, q2;
        
        q1.push(root1);
        q2.push(root2);
        
        unordered_map<int, int> m;
        
        while(1){
            int n1 = q1.size();
            int n2 = q2.size();
            
            if(n1!=n2)      return false;
            
            if(n1 == 0)     break;
            
            while(n1--){
                Node* front1 = q1.front();
                q1.pop();
                m[front1->data]++;
                if(front1->left)      q1.push(front1->left);
                if(front1->right)     q1.push(front1->right);
            }
               
             while(n2--){
                Node* front2 = q2.front();
                q2.pop();
                
                if(m.find(front2->data) == m.end())     return false;
                
                m[front2->data]--;
                
                if(m[front2->data] == 0)
                    m.erase(front2->data);
                
                if(front2->left)     q2.push(front2->left);
                if(front2->right)    q2.push(front2->right);

            } 
                
            if(m.size() > 0)    return false;

        }
        
        return true;
    }
};