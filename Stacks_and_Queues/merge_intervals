class Solution {
public:
    vector<vector<int>> overlappedInterval(vector<vector<int>>& intervals) {
         // Code here
        vector<vector<int>> ans;
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());

        stack<vector<int>> s;
        s.push(intervals[0]);

        for (int i = 1; i < n; i++) {
            vector<int> ci = intervals[i];
            vector<int> li = s.top();

            if (li[1] >= ci[0]) {
                s.pop();

                vector<int> merge = { li[0], max(li[1], ci[1]) };
                s.push(merge); 
            } else {
                s.push(ci);
            }
        }

        while (!s.empty()) {
            ans.push_back(s.top());
            s.pop();
        }

        reverse(ans.begin(), ans.end()); 

        return ans;
    }
};




//optimal
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());

        for(int i = 0; i<n; i++){

            if(ans.empty() || intervals[i][0] > ans.back()[1])
                ans.push_back(intervals[i]);

            else ans.back()[1] = max( ans.back()[1], intervals[i][1]);
        }

        return ans;
    }
};