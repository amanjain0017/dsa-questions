class Solution{
    
    void solve(Node* root, int &count, vector<int>path, int k){
        
        if(root==NULL)
            return ;
            
        path.push_back(root->data);
        
        solve(root->left, count, path, k);
        solve(root->right, count, path, k);
        
        int size = path.size();
        int sum = 0;
        
        for(int i = size-1; i>=0; i--){
            sum+=path[i];
            
            if(sum==k)
                count++;
        }
        
        path.pop_back();
    }
    
  public:
    int sumK(Node *root,int k)
    {
        // code here 
        int count = 0;
        vector<int> path;
        solve(root, count, path, k);
        return count;
    }
};


//using map 
class Solution{
    #define ll long long
 private:
void kSum(Node* root, int k, ll sum, unordered_map<ll,int> &m, int &count){
    if(!root){
        return;
    }
    
    if(sum+root->data == k){
        count++;
    }
    
    count+=m[sum+root->data-k];
    m[sum+root->data]++;

    kSum(root->left, k, sum+root->data, m, count);
    kSum(root->right, k, sum+root->data, m, count);

    m[sum+root->data]--;
    
}
  public:
    int sumK(Node *root,int k)
    {
        // code here 
        int count=0;
        unordered_map<ll,int> m;
        kSum(root,k,0,m,count);
        return count;
    }
};