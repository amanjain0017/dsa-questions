//using two functions
class Solution {
  public:
  
    int height(Node* root){
        if(root==NULL)  
            return 0;
        
        return max(height(root->left), height(root->right)) + 1;
    }
    
    
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        // Your code here
        if (root==NULL)     
            return 0;
            
        int opt1 = diameter(root->left);
        int opt2 = diameter(root->right);
        int opt3 = height(root->left) + height(root->right) + 1;
        
        
        return max(opt1, max(opt2, opt3));
    }
};

//returning height and diameter in 1 call
class Solution {
  public:
  
    pair<int, int> diameterFast(Node* root){
        if(root==NULL){
            pair<int, int> p = make_pair(0,0);
            return p;
        }
        
        pair<int, int> left = diameterFast(root->left);
        pair<int, int> right = diameterFast(root->right);
        
        int opt1 = left.first;
        int opt2 = right.first;
        int opt3 = left.second + right.second + 1;
        
        pair<int, int> ans;
        ans.first = max(opt1, max(opt2, opt3));    
        ans.second = max(left.second, right.second) + 1;
        
        return ans;
    }
    
    
    // Function to return the diameter of a Binary Tree.
    int diameter(Node* root) {
        pair<int, int> p = diameterFast(root);
        return p.first;
    }
};


//less verbose
class Solution {

    int diameter(TreeNode* root, int &dia){
        if(!root){
            return 0;
        }

        int left = diameter(root->left, dia);
        int right = diameter(root->right, dia);

        dia = max(dia, left + right);

        return 1 + max(left, right);
    }

public:
    int diameterOfBinaryTree(TreeNode* root) {
        
        int dia = 0;
        int height = diameter(root, dia);
        return dia;
    }
};