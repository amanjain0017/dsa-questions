//using pair to return isBalanced and height at same time
class Solution{
    
    pair<bool, int> isBalancedFast(Node* root){
        if(root==NULL){
            pair<bool, int> p = make_pair(true,0);
            return p;
        }
        
        pair<bool, int> left = isBalancedFast(root->left);
        pair<bool, int> right = isBalancedFast(root->right);
        
        bool leftAns = left.first;
        bool rightAns = right.first;
        bool nodeBalance = abs(left.second-right.second)<=1;
        
        pair<int, int> ans;
           
        ans.second = max(left.second, right.second) + 1;
        
        if(leftAns && rightAns && nodeBalance)
            ans.first = true;
            
        else ans.first = false;
        
        return ans;
    }
    
    
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        //  Your Code here
        return isBalancedFast(root).first;
    }
};


//using two seperate functions
