
class Solution{
public:
    // function to construct tree from string
    Node* solve(string s, int &index){
        if(s.size()==0 || index>=s.size() )
            return NULL;
            
        int num = 0;
        while( index < s.size() and s[index]!= '(' and s[index]!= ')'){
            int digit = s[index] - '0';
            num = num*10 + digit;
            index++;
        }
        
        Node* root = NULL;
        if(num>0)
            root = new Node(num);
        
        if(index<s.size() and s[index]=='('){
            index++;
            root->left = solve(s, index);
        }
        
        if(index<s.size() and s[index]==')'){
            index++;
            return root;
        }
        
        if(index<s.size() and s[index]=='('){
            index++;
            root->right = solve(s, index);
        }
        
        if(index<s.size() and s[index]==')'){
            index++;
            return root;
        }
        
        return root;
    }
    
    Node *treeFromString(string str){
        // code here
        
        int index = 0;
        
        Node* root = solve(str, index);
        return root;
    }
};



// function to return the index of close parenthesis
int findIndex(string str, int si, int ei)
{
    if (si > ei)
        return -1;
 
    // Inbuilt stack
    stack<char> s;
 
    for (int i = si; i <= ei; i++) {
 
        // if open parenthesis, push it
        if (str[i] == '(')
            s.push(str[i]);
 
        // if close parenthesis
        else if (str[i] == ')') {
            if (s.top() == '(') {
                s.pop();
 
                // if stack is empty, this is
                // the required index
                if (s.empty())
                    return i;
            }
        }
    }
    // if not found return -1
    return -1;
}
 
// function to construct tree from string
Node* treeFromString(string str, int si, int ei)
{
    // Base case
    if (si > ei)
        return NULL;
 
     
      int num = 0;
      // In case the number is having more than 1 digit
      while(si <= ei && str[si] >= '0' && str[si] <= '9')
    {
      num *= 10;
      num += (str[si] - '0');
      si++;
    }
   
      // new root
    Node* root = newNode(num);
    int index = -1;
 
    // if next char is '(' find the index of
    // its complement ')'
    if (si <= ei && str[si] == '(')
        index = findIndex(str, si, ei);
 
    // if index found
    if (index != -1) {
 
        // call for left subtree
        root->left = treeFromString(str, si + 1, index - 1);
 
        // call for right subtree
        root->right = treeFromString(str, index + 2, ei - 1);
    }
    return root;
}
 
// Driver Code
int main()
{
    string str = "4(2(3)(1))(6(5))";
    Node* root = treeFromString(str, 0, str.length() - 1);
    preOrder(root);
}