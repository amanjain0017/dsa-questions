class Solution{
  public:
    /*You are required to complete this method*/
    int ans = 1;
    
    void solve(Node* root, int height, int &ma){
        if(!root)   return;
        
        if(!root->left and !root->right){
            
            if(ma==-1){
                ma = height;
            }
            
            else {
                if(height!=ma){
                ans = 0;
                }
                    
            }
            
            return;
        }
        
        solve(root->left, height+1, ma);
        solve(root->right, height+1, ma);
    }
    
    bool check(Node *root)
    {
        //Your code

        int ma = -1;
        int height = 0;
        
        solve(root, height, ma);
        
        return ans;
        
    }
};




/ return true if all leaf nodes are
// at same level, else false
int checkLevelLeafNode(Node* root)
{
    if (!root)
        return 1;
 
    // create a queue for level order traversal
    queue<Node*> q;
    q.push(root);
 
    int flag = 0;
 
    // traverse until the queue is empty
    while (!q.empty()) {
        int n = q.size();
 
        // traverse for complete level
        for (int i = 1; i <= n; i++) {
            Node* temp = q.front();
            q.pop();
 
            // check for left child
            if (temp->left) {
                q.push(temp->left);
            }
 
            // check for right child
            if (temp->right) {
                q.push(temp->right);
            }
 
            // check for leaf node
            if (temp->left == NULL && temp->right == NULL)
                flag = 1;
        }
 
        // check if there exist any further levels.
        if (flag && !q.empty())
            return 0;
    }
 
    return 1;
}