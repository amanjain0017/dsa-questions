//recursive
class Solution
{
    void solve(Node* root, vector<int> &ans, int level){
    if(root==NULL)
        return ;
    
    if(level==ans.size())
        ans.push_back(root->data);
        
    solve(root->right, ans, level+1);
    solve(root->left, ans, level+1);
        
    }

    public:
    vector<int> rightView(Node *root)
    {
       // Your Code here
        vector<int> ans;    
        solve(root, ans, 0);
   
        return ans;
    }
};

//iterative: LOT
class Solution
{
    public:
    //Function to return list containing elements of right view of binary tree.
    vector<int> rightView(Node *root)
    {
       // Your Code here
       vector<int>ans;
       queue<pair<Node*, int>> q;
       q.push({root,0});
       
       if(root==NULL){
           
            return ans;
        }
    
       while(!q.empty()){
       
       int size = q.size();
       
       for(int i=0 ; i < size ; i++){
           
           Node* node = q.front().first;
           int lvl = q.front().second;
           q.pop();
           
           if(ans.size()== lvl){
              
               ans.push_back(node->data);
           }
           
            if(node->right){
               
               q.push({node->right,lvl+1});
           }
           
           if(node -> left){
               
               q.push({node->left,lvl+1});
           }

       }
   }
   
   
   return ans;
    }
};