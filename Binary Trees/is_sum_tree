//using two sepearate functions
int sum(struct node *root)
{
    if (root == NULL)
        return 0;
    
    return sum(root->left) + root->data +
           sum(root->right);
}

int isSumTree(struct node* node)
{
    int ls, rs;

    // If node is NULL or it's a leaf
    // node then return true 
    if (node == NULL ||
       (node->left == NULL && 
        node->right == NULL))
        return 1;

   // Get sum of nodes in left and
   // right subtrees 
   ls = sum(node->left);
   rs = sum(node->right);

   // If the node and both of its 
   // children satisfy the property 
   // return 1 else 0
    if ((node->data == ls + rs) &&
          isSumTree(node->left) &&
          isSumTree(node->right))
        return 1;

   return 0;
}

//using pair to return isSum and sthe sum togehter
class Solution
{
    pair<bool,int> isSumFast(Node* root){
        if(root==NULL){
            pair<bool, int> p = make_pair(true, 0);
            return p;
        }
        
        if(root->left==NULL && root->right==NULL){
            pair<bool, int> p = make_pair(true, root->data);
            return p;
        }
        
        pair<bool,int> left = isSumFast(root->left);
        pair<bool,int> right = isSumFast(root->right);
        
        bool leftAns = left.first;
        bool rightAns = right.first;
        bool nodeCheck = (root->data==left.second + right.second);
        
        pair<bool,int> ans;
        
        if(leftAns && rightAns && nodeCheck){
            ans.first = true;
            ans.second = root->data + left.second + right.second;
        }
        
        else ans = make_pair(false, 0);
        
        
        return ans;
        
        
    } 
    
    
    public:
    bool isSumTree(Node* root)
    {
        // Your code here
        pair<bool, int> ans = isSumFast(root);
        
        return ans.first;
    }
};