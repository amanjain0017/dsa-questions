class Solution {
public:

    vector<string> res;
    unordered_map<string, int> m;

    int getMinInvalid(string s){

        stack<char> st;

        for(int i = 0; i<s.size(); i++){
            char ch = s[i];

            if(ch == '('){
                st.push(ch);
            }
            else if (ch == ')'){
                if(!st.empty() and st.top()== '(')
                    st.pop();

                else st.push(ch);
            }
        }

        return st.size();
    }

    void solve(string s, int invalid){
        if(m[s]!=0)
            return;
        else m[s]++;

        if(invalid==0){
            if(!getMinInvalid(s)){
                res.push_back(s);
            }
            return;
        }

        for(int i = 0; i<s.size(); i++){
            string left = s.substr(0, i);
            string right = s.substr(i+1);

            solve(left + right, invalid - 1);
        }

        return;
    }

    vector<string> removeInvalidParentheses(string s) {
        solve(s, getMinInvalid(s));
        return res;

    }
};