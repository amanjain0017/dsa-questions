class Solution 
{
    public:
    //Function to find a solved Sudoku. 
    bool isSafe(int row, int col, int grid[N][N], int val){
        
        for(int i = 0; i<N; i++){
            //row check
            if(grid[row][i]== val)  return false;
            //col check
            if(grid[i][col]== val)  return false;
            //grid check
            if(grid[3*(row/3) + i/3][3*(col/3) + i%3]== val)  return false;
        }
        
        return true;
        
    }
    
    bool SolveSudoku(int grid[N][N])  
    { 
        for(int row = 0; row<N; row++){
            for(int col = 0; col<N; col++){
                
                if(grid[row][col] == 0){
                    for(int val = 1; val<=9; val++){
                        
                        if(isSafe(row, col, grid, val)){
                            grid[row][col] = val;
                            
                            bool nextSolution = SolveSudoku(grid);
                            
                            if(nextSolution)
                                return true;
                                
                            else grid[row][col] = 0;        //backtrack
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        // Your code here 
         for(int row = 0; row<N; row++){
            for(int col = 0; col<N; col++){
            
                cout<< grid[row][col]<< " ";
                
            }
             
         }
    }
};