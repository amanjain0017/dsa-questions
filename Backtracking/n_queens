class Solution{
public:

    void addSolution(vector<vector<int>> &board, vector<vector<int>> &ans, int n){
        vector<int> temp;
        
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                if(board[i][j])
                    temp.push_back(j+1);
            }
        }
        
        ans.push_back(temp);
    }
    
    
    bool isSafe( int row, int col, vector<vector<int>> &board, int n){
        
        //row check
        int x = row, y = col;
        while(y>=0){
            if(board[x][y])
                return false;
            y--;
        }
        
        //upper diag
        x = row;
        y = col;
        while(x>=0 && y>=0){
            if(board[x][y])
                return false;
            
            x--;
            y--;
        }
        
        //lower diag
        x = row;
        y = col;
        while(x<n && y>=0){
            if(board[x][y])
                return false;
            
            x++;
            y--;
        }
        
        
        return true;
    }
    
    

    void solve(int col, vector<vector<int>> &ans, vector<vector<int>> &board, int n){
        if(col == n){
            addSolution(board, ans, n);
            return;
        }
        
        //solve 1 case 
        for(int row = 0; row<n; row++){
            if(isSafe(row, col, board, n)){
                board[row][col] = 1;
                solve(col + 1, ans, board, n);
                board[row][col] = 0;                //backtrack
            }
        }
    }

    vector<vector<int>> nQueen(int n) {
        
        vector<vector<int>> board(n, vector<int>(n, 0));
        vector<vector<int>> ans;
        
        solve(0, ans, board, n); 
        
        sort(ans.begin(), ans.end());
        return ans;
    }
};