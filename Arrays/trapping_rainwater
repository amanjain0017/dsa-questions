//using prefixMAX and suffixMAX
class Solution {
public:
    long long trappingWater(int arr[], int n) {
        vector<int> maxL(n);
        vector<int> maxR(n);

        maxL[0] = arr[0];
        for (int i = 1; i < n; i++) {
            maxL[i] = max(arr[i], maxL[i - 1]);
        }

        maxR[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxR[i] = max(arr[i], maxR[i + 1]); 
        }

        vector<int> water(n);
        long long sum = 0;

        for (int i = 0; i < n; i++) {
            water[i] = min(maxL[i], maxR[i]) - arr[i];
            sum += water[i];
        }

        return sum;
    }
};

//2 pointer approach
class Solution {
public:
    long long trappingWater(int arr[], int n) {
        
        long long water = 0;
        int i = 0, j = n-1;
        
        int maxL = arr[i];
        int maxR = arr[j];
        
        while(i<j){
            if( maxL<=maxR ){
                i++;
                maxL = max(maxL, arr[i]);
                water += maxL - arr[i];
            }else{
                j--;
                maxR = max(maxR, arr[j]);
                water += maxR - arr[j];
            }
        }
        
        return water;
    }
};

