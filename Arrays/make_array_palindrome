
//actual question
// Returns minimum number of count operations
// required to make arr[] palindrome
int findMinOps(int arr[], int n)
{
    int ans = 0; // Initialize result
 
    // Start from two corners
    for (int i=0,j=n-1; i<=j;)
    {
        // If corner elements are same,
        // problem reduces arr[i+1..j-1]
        if (arr[i] == arr[j])
        {
            i++;
            j--;
        }
 
        // If left element is greater, then
        // we merge right two elements
        else if (arr[i] > arr[j])
        {
            // need to merge from tail.
            j--;
            arr[j] += arr[j+1] ;
            ans++;
        }
 
        // Else we merge left two elements
        else
        {
            i++;
            arr[i] += arr[i-1];
            ans++;
        }
    }
 
    return ans;
}




    bool isPalindrome(int x){
        int rev = 0, org = x;
        
        while(org>0){
            int digit = org%10;
            rev  = (rev*10) + digit;
            org = org/10;
        }
        
        return rev==x;
    }
    
    
    int PalinArray(int a[], int n)
    {
    	// code here
    	for(int i =0; i<n; i++){
    	    if(!isPalindrome(a[i]))
    	        return 0;
    	}
    	
    	return 1;
    }
};
